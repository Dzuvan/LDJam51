local camera = require "orthographic.camera"
local monarch = require "monarch.monarch"
local data = require "main.data"
local hashed = require "main.hashed"

go.property("speed", 250)
go.property("health", 10)

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", {color = vmath.vector4(0.2, 0.4, 1, 1)})
	self.vel = vmath.vector3(0, 0, 0)
	self.current_animation = nil
	self.correction = vmath.vector3()
	self.is_attacking = false
	msg.post("sword#collisionobject", "disable")
end

function update(self, dt)
	go.set_position(go.get_position() + self.vel * dt)
	if self.vel.x == 0 and self.vel.y == 0 then
		data.play_animation(self, hashed.anim_idle)
	end
	self.correction = vmath.vector3()
	self.vel = vmath.vector3()
end

local function stop_attack(self)
	self.is_attacking = false
	msg.post("sword#collisionobject", "disable")
end

local function on_move(self, action_id)
	if action_id == hashed.key_d then
		self.vel.x = self.speed
		data.play_animation(self, hashed.anim_run)
		go.set_position(vmath.vector3(0, 3, 0.1), "sword")
		sprite.set_hflip("#sprite", false)
	elseif action_id == hashed.key_a then
		self.vel.x = -self.speed
		data.play_animation(self, hashed.anim_run)
		go.set_position(vmath.vector3(16, 3, 0.1), "sword")
		sprite.set_hflip("#sprite", true)
	elseif action_id == hashed.key_w then
		self.vel.y = self.speed
		data.play_animation(self, hashed.anim_run)
	elseif action_id == hashed.key_s then
		self.vel.y = -self.speed
		data.play_animation(self, hashed.anim_run)
	end
end

local function on_basic_attack(self, action_id)
	msg.post("sword#collisionobject", "enable")
	self.is_attacking = true
	local sword = go.get_position("sword")
	local angle = sword.x > 0 and 270 or -270
	local pos = sword.x > 0 and -20 or 20
	go.animate("sword", "euler.z", go.PLAYBACK_ONCE_PINGPONG, -270, go.EASING_LINEAR, 0.5, 0, stop_attack)
	go.animate("sword", "position.x", go.PLAYBACK_ONCE_PINGPONG, pos, go.EASING_INBOUNCE, 0.5)
end

function on_input(self, action_id, action)
	on_move(self, action_id)
	if action.released then
		if action_id == hashed.key_g and not self.is_attacking then
			on_basic_attack(self, action_id)
		elseif action_id == hashed.key_f1 then
			msg.post("@system:", "toggle_physics_debug")
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hashed.contact_point_response then
		if message.other_group == hashed.wall then
			data.resolve_geometry(self, message_id, message)
		elseif message.other_group == hashed.projectile then
			go.delete(message.other_id)
			msg.post(".", "player_hit")
		end
	elseif message_id == hashed.player_hit then
		if self.health >= 1 then
			self.health = self.health - 1
		end
		if self.health < 3 then
			camera.shake(hashed["/camera"], 0.003, 0.15)
		end
		if self.health < 1 then
			monarch.show("game_over")
		end
	elseif message_id == hashed.stun then
		self.vel = vmath.vector3(0, 0, 0)
		self.actions = {}
		msg.post(".", "release_input_focus")
		timer.delay(message.duration, false, function() msg.post(".", "acquire_input_focus") end
	)
end
end
